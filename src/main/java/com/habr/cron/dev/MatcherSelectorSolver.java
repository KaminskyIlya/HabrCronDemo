package com.habr.cron.dev;

/**
 * Класс, помогающий выборать наиболее подходящий матчер из BitMapMatcher или ListOfIntervalsMatcher
 * по результатам распределения значений для миллисекунд
 */
public class MatcherSelectorSolver
{
    /**
     * Пока статическая функция
     * @param grouping группировка значений расписания по диапазону (10 групп)
     * @return true, если необходимо использовать ListOfIntervalsMatcher
     */
    public static boolean solve(float grouping[])
    {
        float statuses[] = new float[10];

        // активируем 10 входных нейронов (statuses) входными значениями grouping
        for (int neurone = 0; neurone < 10; neurone++)
        {
            float weights[] = R2LI[neurone];

            for (int synapse = 0; synapse < 10; synapse++)
            {
                statuses[synapse] += grouping[neurone] * weights[synapse];
            }
        }
        for (int neurone = 0; neurone < 10; neurone++)
            statuses[neurone] = (float) sigmoid(statuses[neurone]);

        // передаем результаты активации (statuses) с входного слоя на выходной слой (result)
        {
            float sum_of_links = 0;

            for (int synapse = 0; synapse < 10; synapse++)
            {
                float link = statuses[synapse] * R2LO[synapse];
                sum_of_links += link;
            }

            float state = (float) sigmoid(sum_of_links);
            int result = Math.round(state);

            return result == 1;
        }
    }

    private static double sigmoid(double x)
    {
        return 1d / (1 + Math.exp(-x));
    }

    // коэффициенты для 2-х диапазонов входного слоя (10 нейронов)
    private static final float[][] R2LI = new float[][]{
            {
                    2.0773755486113754f,
                    0.7004867081279713f,
                   -4.304205744619925f,
                    5.021440276175798f,
                    3.306226058556356f,
                   -1.633019088416729f,
                    1.1965700887912614f,
                   -1.6520696134048263f,
                    4.439520270330831f,
                    2.9613793908492214f
            },
            {
                    11.743509209759416f,
                   -0.7522647115601967f,
                   -1.6284069420181606f,
                   -3.9897785937224004f,
                   -0.6272234581363794f,
                   -2.6611892028475186f,
                    0.9656838524271675f,
                   -4.039687627753048f,
                    3.235171202289447f,
                   -0.21200875304257097f
            },
            {
                   -1.3576359180112831f,
                   -1.0185893059368727f,
                   -1.9188721237498056f,
                   -0.06130027928430201f,
                   -3.0734447572113854f,
                    9.02105326890081f,
                   -0.5098974985811625f,
                    1.264067116224997f,
                   -7.466796601614525f,
                   -4.605569033709546f
            },
            {
                    4.268342447245819f,
                   -4.677718055708948f,
                    3.175337388459581f,
                   -5.4555003937680375f,
                   -0.8691236172735343f,
                   -8.2595441387759f,
                   -1.5592641866625316f,
                   -3.8773730700309272f,
                    0.6906732190600365f,
                   -3.3536968236330633f
            },
            {
                    10.721399718063717f,
                    1.2759180477726406f,
                    3.2043582445027847f,
                    11.947889413794655f,
                    2.4521279253222694f,
                   -8.517914302797871f,
                   -0.742955663060516f,
                    4.047209228749479f,
                    9.443820432418963f,
                    4.145307265569276f

            },
            {
                    0.16842795558441387f,
                    1.7331048563825944f,
                   -3.7377869748241266f,
                   -2.331790056718924f,
                   -2.261682143747419f,
                    1.595686015827629f,
                   -1.3814957060098947f,
                   -2.0728800740837627f,
                    3.033872682151005f,
                   -2.583327985476763f
            },
            {
                   -9.148515717264306f,
                    0.14049248265378111f,
                   -5.36290341964226f,
                   -10.35921672610068f,
                   -10.652674619413395f,
                   -5.609695487009494f,
                    0.4146492484783136f,
                    1.0193125493311026f,
                   -9.249551611981396f,
                   -6.512296713166995f
            },
            {
                   -6.121395346233808f,
                   -0.8888168474345278f,
                    4.307948447574121f,
                    1.7980227227165917f,
                   -3.9291543484797695f,
                    5.433671726043842f,
                    2.5121764685680295f,
                   -5.180485701569626f,
                   -3.4427157243229334f,
                   -2.6839595502339795f
            },
            {
                    0.7080334385573268f,
                   -4.313687504900677f,
                   -5.34635016632739f,
                    1.328359749999091f,
                    2.1413929377448273f,
                    14.863295597355533f,
                    1.1797426794461934f,
                   -3.344370943678076f,
                   -9.267874385129918f,
                    1.247142612282236f
            },
            {
                    4.94548187754088f,
                   -3.9629520597877423f,
                   -5.205768941422011f,
                   -4.0057136918045115f,
                    7.313375012612497f,
                   -14.367812346338749f,
                    0.8897762933134833f,
                    9.724270376858398f,
                    4.3866229051460905f,
                    1.1078509323137533f
            },
    };

    // коэффициенты для 2-х диапазонов выходного слоя (1 нейрон)
    private static final float[] R2LO = new float[]{
            -15.498063007698988f,
            -4.172826599606948f,
            -8.394401899758767f,
            -14.9798938119154f,
            14.904406564646205f,
            17.846335838498803f,
            -9.324029466142186f,
            16.20505729930213f,
            23.16071260611824f,
            10.741211330304393f,
    };
}
